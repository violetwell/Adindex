/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef InnerIndex_H
#define InnerIndex_H

#include <TProcessor.h>
#include "indexlog_types.h"



class InnerIndexIf {
 public:
  virtual ~InnerIndexIf() {}
  virtual void loadData(std::vector<InnerDocument> & _return, const std::string& topic, const int64_t start, const int32_t num) = 0;
};

class InnerIndexIfFactory {
 public:
  typedef InnerIndexIf Handler;

  virtual ~InnerIndexIfFactory() {}

  virtual InnerIndexIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(InnerIndexIf* /* handler */) = 0;
};

class InnerIndexIfSingletonFactory : virtual public InnerIndexIfFactory {
 public:
  InnerIndexIfSingletonFactory(const boost::shared_ptr<InnerIndexIf>& iface) : iface_(iface) {}
  virtual ~InnerIndexIfSingletonFactory() {}

  virtual InnerIndexIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(InnerIndexIf* /* handler */) {}

 protected:
  boost::shared_ptr<InnerIndexIf> iface_;
};

class InnerIndexNull : virtual public InnerIndexIf {
 public:
  virtual ~InnerIndexNull() {}
  void loadData(std::vector<InnerDocument> & /* _return */, const std::string& /* topic */, const int64_t /* start */, const int32_t /* num */) {
    return;
  }
};

typedef struct _InnerIndex_loadData_args__isset {
  _InnerIndex_loadData_args__isset() : topic(false), start(false), num(false) {}
  bool topic;
  bool start;
  bool num;
} _InnerIndex_loadData_args__isset;

class InnerIndex_loadData_args {
 public:

  InnerIndex_loadData_args() : topic(""), start(0), num(0) {
  }

  virtual ~InnerIndex_loadData_args() throw() {}

  std::string topic;
  int64_t start;
  int32_t num;

  _InnerIndex_loadData_args__isset __isset;

  void __set_topic(const std::string& val) {
    topic = val;
  }

  void __set_start(const int64_t val) {
    start = val;
  }

  void __set_num(const int32_t val) {
    num = val;
  }

  bool operator == (const InnerIndex_loadData_args & rhs) const
  {
    if (!(topic == rhs.topic))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const InnerIndex_loadData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InnerIndex_loadData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InnerIndex_loadData_pargs {
 public:


  virtual ~InnerIndex_loadData_pargs() throw() {}

  const std::string* topic;
  const int64_t* start;
  const int32_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InnerIndex_loadData_result__isset {
  _InnerIndex_loadData_result__isset() : success(false) {}
  bool success;
} _InnerIndex_loadData_result__isset;

class InnerIndex_loadData_result {
 public:

  InnerIndex_loadData_result() {
  }

  virtual ~InnerIndex_loadData_result() throw() {}

  std::vector<InnerDocument>  success;

  _InnerIndex_loadData_result__isset __isset;

  void __set_success(const std::vector<InnerDocument> & val) {
    success = val;
  }

  bool operator == (const InnerIndex_loadData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InnerIndex_loadData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InnerIndex_loadData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InnerIndex_loadData_presult__isset {
  _InnerIndex_loadData_presult__isset() : success(false) {}
  bool success;
} _InnerIndex_loadData_presult__isset;

class InnerIndex_loadData_presult {
 public:


  virtual ~InnerIndex_loadData_presult() throw() {}

  std::vector<InnerDocument> * success;

  _InnerIndex_loadData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class InnerIndexClient : virtual public InnerIndexIf {
 public:
  InnerIndexClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  InnerIndexClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void loadData(std::vector<InnerDocument> & _return, const std::string& topic, const int64_t start, const int32_t num);
  void send_loadData(const std::string& topic, const int64_t start, const int32_t num);
  void recv_loadData(std::vector<InnerDocument> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class InnerIndexProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<InnerIndexIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (InnerIndexProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_loadData(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  InnerIndexProcessor(boost::shared_ptr<InnerIndexIf> iface) :
    iface_(iface) {
    processMap_["loadData"] = &InnerIndexProcessor::process_loadData;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~InnerIndexProcessor() {}
};

class InnerIndexProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  InnerIndexProcessorFactory(const ::boost::shared_ptr< InnerIndexIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< InnerIndexIfFactory > handlerFactory_;
};

class InnerIndexMultiface : virtual public InnerIndexIf {
 public:
  InnerIndexMultiface(std::vector<boost::shared_ptr<InnerIndexIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~InnerIndexMultiface() {}
 protected:
  std::vector<boost::shared_ptr<InnerIndexIf> > ifaces_;
  InnerIndexMultiface() {}
  void add(boost::shared_ptr<InnerIndexIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void loadData(std::vector<InnerDocument> & _return, const std::string& topic, const int64_t start, const int32_t num) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->loadData(_return, topic, start, num);
        return;
      } else {
        ifaces_[i]->loadData(_return, topic, start, num);
      }
    }
  }

};



#endif
