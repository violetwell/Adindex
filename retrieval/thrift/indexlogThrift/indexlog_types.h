/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef indexlog_TYPES_H
#define indexlog_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>





typedef struct _Document__isset {
  _Document__isset() : fields(false), boost(false) {}
  bool fields;
  bool boost;
} _Document__isset;

class Document {
 public:

  static const char* ascii_fingerprint; // = "3CEC7EFB98CEC60136872BB8B19CA3A8";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0xEC,0x7E,0xFB,0x98,0xCE,0xC6,0x01,0x36,0x87,0x2B,0xB8,0xB1,0x9C,0xA3,0xA8};

  Document() : boost(0) {
  }

  virtual ~Document() throw() {}

  std::map<std::string, std::string>  fields;
  int32_t boost;

  _Document__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val) {
    fields = val;
  }

  void __set_boost(const int32_t val) {
    boost = val;
    __isset.boost = true;
  }

  bool operator == (const Document & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    if (__isset.boost != rhs.__isset.boost)
      return false;
    else if (__isset.boost && !(boost == rhs.boost))
      return false;
    return true;
  }
  bool operator != (const Document &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Document & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InnerDocument__isset {
  _InnerDocument__isset() : id(false), data(false), dataLen(false) {}
  bool id;
  bool data;
  bool dataLen;
} _InnerDocument__isset;

class InnerDocument {
 public:

  static const char* ascii_fingerprint; // = "FA14FF3C297F6EBE2FC46FD846FF0E76";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x14,0xFF,0x3C,0x29,0x7F,0x6E,0xBE,0x2F,0xC4,0x6F,0xD8,0x46,0xFF,0x0E,0x76};

  InnerDocument() : id(0), data(""), dataLen(0) {
  }

  virtual ~InnerDocument() throw() {}

  int64_t id;
  std::string data;
  int32_t dataLen;

  _InnerDocument__isset __isset;

  void __set_id(const int64_t val) {
    id = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  void __set_dataLen(const int32_t val) {
    dataLen = val;
  }

  bool operator == (const InnerDocument & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(dataLen == rhs.dataLen))
      return false;
    return true;
  }
  bool operator != (const InnerDocument &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InnerDocument & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};



#endif
