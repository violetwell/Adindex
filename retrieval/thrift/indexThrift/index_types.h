/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef index_TYPES_H
#define index_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _qpair__isset {
  _qpair__isset() : qkey(false), qval(false) {}
  bool qkey;
  bool qval;
} _qpair__isset;

class qpair {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  qpair() : qkey(), qval() {
  }

  virtual ~qpair() throw() {}

  std::string qkey;
  std::string qval;

  _qpair__isset __isset;

  void __set_qkey(const std::string& val) {
    qkey = val;
  }

  void __set_qval(const std::string& val) {
    qval = val;
  }

  bool operator == (const qpair & rhs) const
  {
    if (!(qkey == rhs.qkey))
      return false;
    if (!(qval == rhs.qval))
      return false;
    return true;
  }
  bool operator != (const qpair &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const qpair & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(qpair &a, qpair &b);

typedef struct _QTerm__isset {
  _QTerm__isset() : single_query(false), filter(false), tags(false), dnf(false) {}
  bool single_query;
  bool filter;
  bool tags;
  bool dnf;
} _QTerm__isset;

class QTerm {
 public:

  static const char* ascii_fingerprint; // = "5F85DC334F20BFE7FF11DCFE32833756";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x85,0xDC,0x33,0x4F,0x20,0xBF,0xE7,0xFF,0x11,0xDC,0xFE,0x32,0x83,0x37,0x56};

  QTerm() {
  }

  virtual ~QTerm() throw() {}

  std::vector<qpair>  single_query;
  std::vector<qpair>  filter;
  std::vector<int64_t>  tags;
  std::vector<int64_t>  dnf;

  _QTerm__isset __isset;

  void __set_single_query(const std::vector<qpair> & val) {
    single_query = val;
  }

  void __set_filter(const std::vector<qpair> & val) {
    filter = val;
  }

  void __set_tags(const std::vector<int64_t> & val) {
    tags = val;
  }

  void __set_dnf(const std::vector<int64_t> & val) {
    dnf = val;
  }

  bool operator == (const QTerm & rhs) const
  {
    if (!(single_query == rhs.single_query))
      return false;
    if (!(filter == rhs.filter))
      return false;
    if (!(tags == rhs.tags))
      return false;
    if (!(dnf == rhs.dnf))
      return false;
    return true;
  }
  bool operator != (const QTerm &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QTerm & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QTerm &a, QTerm &b);

typedef struct _QDocument__isset {
  _QDocument__isset() : fields(false) {}
  bool fields;
} _QDocument__isset;

class QDocument {
 public:

  static const char* ascii_fingerprint; // = "5EA2D527ECA3BA20C77AFC023EE8C05F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};

  QDocument() {
  }

  virtual ~QDocument() throw() {}

  std::map<std::string, std::string>  fields;

  _QDocument__isset __isset;

  void __set_fields(const std::map<std::string, std::string> & val) {
    fields = val;
  }

  bool operator == (const QDocument & rhs) const
  {
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const QDocument &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QDocument & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QDocument &a, QDocument &b);

typedef struct _Query__isset {
  _Query__isset() : sortedby(false), results(false) {}
  bool sortedby;
  bool results;
} _Query__isset;

class Query {
 public:

  static const char* ascii_fingerprint; // = "C0134CE1C52133DCDA5028D5B554A2AA";
  static const uint8_t binary_fingerprint[16]; // = {0xC0,0x13,0x4C,0xE1,0xC5,0x21,0x33,0xDC,0xDA,0x50,0x28,0xD5,0xB5,0x54,0xA2,0xAA};

  Query() : start(0), length(0), sortedby() {
  }

  virtual ~Query() throw() {}

  QTerm terms;
  int32_t start;
  int32_t length;
  std::string sortedby;
  std::vector<std::string>  results;

  _Query__isset __isset;

  void __set_terms(const QTerm& val) {
    terms = val;
  }

  void __set_start(const int32_t val) {
    start = val;
  }

  void __set_length(const int32_t val) {
    length = val;
  }

  void __set_sortedby(const std::string& val) {
    sortedby = val;
    __isset.sortedby = true;
  }

  void __set_results(const std::vector<std::string> & val) {
    results = val;
    __isset.results = true;
  }

  bool operator == (const Query & rhs) const
  {
    if (!(terms == rhs.terms))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(length == rhs.length))
      return false;
    if (__isset.sortedby != rhs.__isset.sortedby)
      return false;
    else if (__isset.sortedby && !(sortedby == rhs.sortedby))
      return false;
    if (__isset.results != rhs.__isset.results)
      return false;
    else if (__isset.results && !(results == rhs.results))
      return false;
    return true;
  }
  bool operator != (const Query &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Query & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Query &a, Query &b);



#endif
