/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef thriftSearch_H
#define thriftSearch_H

#include <thrift/TDispatchProcessor.h>
#include "index_types.h"



class thriftSearchIf {
 public:
  virtual ~thriftSearchIf() {}
  virtual void search(std::vector<QDocument> & _return, const Query& q) = 0;
  virtual void getMonitorKey(std::vector<std::string> & _return) = 0;
};

class thriftSearchIfFactory {
 public:
  typedef thriftSearchIf Handler;

  virtual ~thriftSearchIfFactory() {}

  virtual thriftSearchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(thriftSearchIf* /* handler */) = 0;
};

class thriftSearchIfSingletonFactory : virtual public thriftSearchIfFactory {
 public:
  thriftSearchIfSingletonFactory(const boost::shared_ptr<thriftSearchIf>& iface) : iface_(iface) {}
  virtual ~thriftSearchIfSingletonFactory() {}

  virtual thriftSearchIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(thriftSearchIf* /* handler */) {}

 protected:
  boost::shared_ptr<thriftSearchIf> iface_;
};

class thriftSearchNull : virtual public thriftSearchIf {
 public:
  virtual ~thriftSearchNull() {}
  void search(std::vector<QDocument> & /* _return */, const Query& /* q */) {
    return;
  }
  void getMonitorKey(std::vector<std::string> & /* _return */) {
    return;
  }
};

typedef struct _thriftSearch_search_args__isset {
  _thriftSearch_search_args__isset() : q(false) {}
  bool q;
} _thriftSearch_search_args__isset;

class thriftSearch_search_args {
 public:

  thriftSearch_search_args() {
  }

  virtual ~thriftSearch_search_args() throw() {}

  Query q;

  _thriftSearch_search_args__isset __isset;

  void __set_q(const Query& val) {
    q = val;
  }

  bool operator == (const thriftSearch_search_args & rhs) const
  {
    if (!(q == rhs.q))
      return false;
    return true;
  }
  bool operator != (const thriftSearch_search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thriftSearch_search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class thriftSearch_search_pargs {
 public:


  virtual ~thriftSearch_search_pargs() throw() {}

  const Query* q;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _thriftSearch_search_result__isset {
  _thriftSearch_search_result__isset() : success(false) {}
  bool success;
} _thriftSearch_search_result__isset;

class thriftSearch_search_result {
 public:

  thriftSearch_search_result() {
  }

  virtual ~thriftSearch_search_result() throw() {}

  std::vector<QDocument>  success;

  _thriftSearch_search_result__isset __isset;

  void __set_success(const std::vector<QDocument> & val) {
    success = val;
  }

  bool operator == (const thriftSearch_search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const thriftSearch_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thriftSearch_search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _thriftSearch_search_presult__isset {
  _thriftSearch_search_presult__isset() : success(false) {}
  bool success;
} _thriftSearch_search_presult__isset;

class thriftSearch_search_presult {
 public:


  virtual ~thriftSearch_search_presult() throw() {}

  std::vector<QDocument> * success;

  _thriftSearch_search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class thriftSearch_getMonitorKey_args {
 public:

  thriftSearch_getMonitorKey_args() {
  }

  virtual ~thriftSearch_getMonitorKey_args() throw() {}


  bool operator == (const thriftSearch_getMonitorKey_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const thriftSearch_getMonitorKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thriftSearch_getMonitorKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class thriftSearch_getMonitorKey_pargs {
 public:


  virtual ~thriftSearch_getMonitorKey_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _thriftSearch_getMonitorKey_result__isset {
  _thriftSearch_getMonitorKey_result__isset() : success(false) {}
  bool success;
} _thriftSearch_getMonitorKey_result__isset;

class thriftSearch_getMonitorKey_result {
 public:

  thriftSearch_getMonitorKey_result() {
  }

  virtual ~thriftSearch_getMonitorKey_result() throw() {}

  std::vector<std::string>  success;

  _thriftSearch_getMonitorKey_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const thriftSearch_getMonitorKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const thriftSearch_getMonitorKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thriftSearch_getMonitorKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _thriftSearch_getMonitorKey_presult__isset {
  _thriftSearch_getMonitorKey_presult__isset() : success(false) {}
  bool success;
} _thriftSearch_getMonitorKey_presult__isset;

class thriftSearch_getMonitorKey_presult {
 public:


  virtual ~thriftSearch_getMonitorKey_presult() throw() {}

  std::vector<std::string> * success;

  _thriftSearch_getMonitorKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class thriftSearchClient : virtual public thriftSearchIf {
 public:
  thriftSearchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  thriftSearchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void search(std::vector<QDocument> & _return, const Query& q);
  void send_search(const Query& q);
  void recv_search(std::vector<QDocument> & _return);
  void getMonitorKey(std::vector<std::string> & _return);
  void send_getMonitorKey();
  void recv_getMonitorKey(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class thriftSearchProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<thriftSearchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (thriftSearchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMonitorKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  thriftSearchProcessor(boost::shared_ptr<thriftSearchIf> iface) :
    iface_(iface) {
    processMap_["search"] = &thriftSearchProcessor::process_search;
    processMap_["getMonitorKey"] = &thriftSearchProcessor::process_getMonitorKey;
  }

  virtual ~thriftSearchProcessor() {}
};

class thriftSearchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  thriftSearchProcessorFactory(const ::boost::shared_ptr< thriftSearchIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< thriftSearchIfFactory > handlerFactory_;
};

class thriftSearchMultiface : virtual public thriftSearchIf {
 public:
  thriftSearchMultiface(std::vector<boost::shared_ptr<thriftSearchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~thriftSearchMultiface() {}
 protected:
  std::vector<boost::shared_ptr<thriftSearchIf> > ifaces_;
  thriftSearchMultiface() {}
  void add(boost::shared_ptr<thriftSearchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void search(std::vector<QDocument> & _return, const Query& q) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search(_return, q);
    }
    ifaces_[i]->search(_return, q);
    return;
  }

  void getMonitorKey(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMonitorKey(_return);
    }
    ifaces_[i]->getMonitorKey(_return);
    return;
  }

};



#endif
