---- invertedStart Matches (28 in 4 files) ----
Def.h (retrieval\index):	int invertedStart;
Def.h (retrieval\index):	int invertedStart;                       /* point to the start of conjId, payload in dnftermPostPool */
Inverted.cpp (retrieval\index):		reader->init(termPostPool, post->invertedStart, post->invertedUpto);
Inverted.cpp (retrieval\index):		reader->init(dnftermPostPool, post->invertedStart, post->invertedUpto);
Inverted.cpp (retrieval\index):				p->invertedStart = upto + termPostPool->byteOffset;
Inverted.cpp (retrieval\index):				p->invertedUpto = p->invertedStart;
Inverted.cpp (retrieval\index):				dnfp->invertedStart = upto + dnftermPostPool->byteOffset;
Inverted.cpp (retrieval\index):				dnfp->invertedUpto = dnfp->invertedStart;
Realtime.cpp (retrieval\index):		positions[0][i].invertedStart = -1;
Realtime.cpp (retrieval\index):		dnfpositions[0][i].invertedStart = -1;
Realtime.cpp (retrieval\index):			newpositions[i][j].invertedStart = -1;
Realtime.cpp (retrieval\index):			newpositions[i][j].invertedStart = -1;
Realtime.cpp (retrieval\index):	dnfp->invertedStart = upto + dnftermPostPool->byteOffset;                                                /* write invertedStart */
Realtime.cpp (retrieval\index):		reader->init(termPostPool, post->invertedStart, post->invertedUpto);
Realtime.cpp (retrieval\index):		reader->init(dnftermPostPool, post->invertedStart, post->invertedUpto);
Realtime.cpp (retrieval\index):			int invertedStart = p->invertedStart;
Realtime.cpp (retrieval\index):			if (invertedStart == -1) {                                                                  /* new term, no inverted data */
Realtime.cpp (retrieval\index):				p->invertedStart = temp;
Realtime.cpp (retrieval\index):			int invertedStart = dnfp->invertedStart;
Realtime.cpp (retrieval\index):			if (invertedStart == -1) {                                                                      /* new dnf term */
Realtime.cpp (retrieval\index):				dnfp->invertedStart = temp;
Term.cpp (retrieval\search):	if (list == NULL || (list->invertedStart == -1)) return false;
Term.cpp (retrieval\search):	invert->invertStart = list->invertedStart;
Term.cpp (retrieval\search):	if (list == NULL || (list->invertedStart == -1)) return false;
Term.cpp (retrieval\search):	invert->invertStart = list->invertedStart;
